% Generated by roxygen2 (4.0.1): do not edit by hand
\name{getLasPointsNearRegion}
\alias{getLasPointsNearRegion}
\title{Extract laspoints near a given polygon or line}
\usage{
getLasPointsNearRegion(region, lasFiles, bufWidth, zRange = NULL)
}
\arguments{
\item{region}{-- A SpatialLines or SpatialPolygons type object defining where we want las points}

\item{lasFiles}{-- A vector of las filenames to search through}

\item{bufWidth}{-- Numeric constant --  Buffer region by this width before
extracting. Must be > 0 if region is a SpatialLines object.}

\item{zRange}{-- length 2 numeric vector -- only extract points within this elevation range}
}
\value{
-- Matrix with las points
}
\description{
If bufWidth>0 then 'region' can be a line, which will be buffered to a
polygon. Alternatively 'region' can be a polygon, which supports any bufWidth
[likely bufWidth=0 is desired]
}
\examples{
lasFile=paste0(system.file(package='LASextractor'), '/extdata/points.las')
lineShpFile=paste0(system.file(package='LASextractor'),'/extdata/Linear_extraction_line.shp')
myLine=readOGR(dsn=lineShpFile,layer=gsub('.shp','',basename(lineShpFile)))
bufWidth=20.
lasSubset=getLasPointsNearRegion(myLine, lasFile, bufWidth=bufWidth)
plot(lasSubset[,1:2],col=lasSubset[,3]+2,asp=1, main='Points near the line',pch='.',cex=1.5)
plot(myLine,add=TRUE,col='black',lwd=3)

# Test that the point subset is inside the buffered line
bufLine=gBuffer(myLine,width=bufWidth)
p1 = bufLine@polygons[[1]]@Polygons[[1]]@coords
pts_in_bufLine = point.in.polygon( lasSubset[,1],lasSubset[,2],p1[,1],p1[,2])
stopifnot(all(pts_in_bufLine==1))
}

