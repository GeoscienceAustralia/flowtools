% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/lasUtil.R
\name{gridXYZ}
\alias{gridXYZ}
\title{Convert xyz data to raster}
\usage{
gridXYZ(myXYZ, dx = 1, dy = 1, CRSinfo = NULL,
  interpMethod = "triangular_interpolation")
}
\arguments{
\item{myXYZ}{-- 3 column matrix with XYZ data}

\item{dx}{-- pixel x size for new raster}

\item{dy}{-- pixel y size for new raster}

\item{CRSinfo}{-- the projection information for the new raster as a CRS
object. If NULL, no projection is defined (but this can be set later)}

\item{interpMethod}{-- the interpolation method to use. Supported methods
are 'triangular_interpolation' and 'nearest_neighbour_interpolation'}
}
\value{
raster object with the gridded data
}
\description{
Grid XYZ data and produce a raster with extent equal to the XYZ data extent
}
\details{
If CRSinfo = NULL then the raster is not georeferenced, but the projection
can be specified later
}
\examples{
lasFile=paste0(system.file(package='LASextractor'), '/extdata/points.las')
  # CRS of the data
  myCRS=CRS('+init=epsg:26914')
  # Get extent as a SpatialPolygons object
  mypol=getLasFileExtentPolygon(lasFile,myCRS)
  # Now make a polygon by trimming off the outer 100m
  mypol_shrunk=gBuffer(mypol,width=-100)
  # Extract lidar points in mypol_shrunk
  point_subset=getLasFilePointsInPolygon(mypol_shrunk, lasFile)
  # Make a raster and plot it
  point_subset_rast=gridXYZ(point_subset, dx=0.5,dy=0.5, CRSinfo=myCRS,
                            interpMethod='triangular_interpolation')
  plot(point_subset_rast)
  # Bit of testing
  point_subset_rast=gridXYZ(point_subset, dx=0.5,dy=0.5, CRSinfo=myCRS,
                            interpMethod='nearest_neighbour_interpolation')
  # Convert back to points, then find nearest_neighbours in point_subset,
  # and check it is correct
  point_subset_rastPts = rasterToPoints(point_subset_rast)
  nearest_lasPts = nearest_neighbour_interpolation(point_subset[,1:2],
      1:length(point_subset[,1]), point_subset_rastPts[,1:2])
  stopifnot(all(point_subset_rastPts[,3]==point_subset[nearest_lasPts,3]))
}

