% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/lasUtil.R
\name{line2XyDist}
\alias{line2XyDist}
\title{Convert a line to points + along-line-distance}
\usage{
line2XyDist(myLine, maxSpacing = NULL)
}
\arguments{
\item{myLine}{-- SpatialLines object}

\item{maxSpacing}{-- Maximum distance allowed between points on the output
line. All points originally on the line will be included}
}
\value{
-- Matrix with x,y,distance
}
\description{
Given a SpatialLines object myLine, sample it at point locations and
compute their associated along-line distance.
All points originally on the line are included,
but segments are divided to ensure spacing < maxSpacing
}
\examples{
lineShpFile=paste0(system.file(package='LASextractor'),
                   '/extdata/Linear_extraction_line.shp')
myLine=readOGR(dsn=lineShpFile,layer=gsub('.shp','',basename(lineShpFile)))
newLine=line2XyDist(myLine,maxSpacing=10)
plot(myLine,asp=1,lwd=3)
points(newLine[,1:2],col='red')

# Test that all origPts are on the line
origPts=myLine@lines[[1]]@Lines[[1]]@coords
for(i in 1:length(origPts[,1])){
   s = abs(origPts[i,1]-newLine[,1]) + abs(origPts[i,2]-newLine[,2])
   stopifnot(min(s)==0)
}
# Test that the max spacing between points on newLine is 10
dl = diff(newLine[,1])**2 + diff(newLine[,2])**2
stopifnot(max(dl)<= 10**2)
# Check that distances are ok up to rounding error
stopifnot( max( abs( newLine[,3] - cumsum(c(0,sqrt(dl))) )) < 1.0e-08)
}

