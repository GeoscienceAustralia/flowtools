% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/lasUtil.R
\name{assignLinearDistancesToPoints}
\alias{assignLinearDistancesToPoints}
\title{Assign 'along-line' distances to a set of points based on a line}
\usage{
assignLinearDistancesToPoints(myLine, nearbyPoints, linePtSpacing)
}
\arguments{
\item{myLine}{-- SpatialLines object}

\item{nearbyPoints}{-- xyz.... matrix with 3 or more columns. First 3
columns are xyz (defining the points P described above)}

\item{linePtSpacing}{-- Sample myLine with points separated by <=
linePtSpacing (to make the P' points described above)}
}
\value{
SpatialPointsDataFrame with coordinates = nearbyPoints[,1:2] and
  data = cbind(nearbyPoints[:,-c(1,2)], along_line_distance)
}
\description{
Suppose we have a line L and some points P which roughly follow L (but are
not all on it). For example consider the x,y coordinates of some lidar
points which roughly follow a levee. We want to assign an
along-line distance to each point P, based on nearby points on L. \cr
The (basic) approach here is to sample a set of points P' along L (which are
separated by distance <= linePtSpacing),
and then compute the linear distances along L for each P'. Then for each
point in
P, we find the nearest point in P', and assign a linear distance to each P
point based on the linear
distance of the nearest P' point. \cr
Note this could fail if linePtSpacing is
not small enough, where 'small_enough' will be case dependent.
}
\examples{
lasFile=paste0(system.file(package='LASextractor'), '/extdata/points.las')
    lineShpFile=paste0(system.file(package='LASextractor'),'/extdata/Linear_extraction_line.shp')
    myLine=readOGR(dsn=lineShpFile,layer=gsub('.shp','',basename(lineShpFile)))
    # Get points near myLine
    lasSubset=getLasPointsNearRegion(myLine, lasFile, bufWidth=20.)
    # Assign distances along the line to the points [based on sub-sampling
    # myline at a max distance of 0.25m]
    lasSubset_dist=assignLinearDistancesToPoints(myLine,lasSubset,0.25)
    # Informative plot
    .plotOutPts(lasSubset_dist)
    # Test
    lp = line2XyDist(myLine, maxSpacing=0.25)
    clsd = coordinates(lasSubset_dist)
    nearest_lp=nearest_neighbour_interpolation(lp, 1:length(lp[,1]), clsd)
    dist_nearest_lasPt = sqrt((lp[nearest_lp,1]- clsd[,1])**2 +  (lp[nearest_lp,2]- clsd[,2])**2 )
    stopifnot(all(lasSubset_dist$ptDist == lp[nearest_lp,3]))
    # The nearest line point should be < (bufwidth + small increase for finite line point spacing)
    stopifnot(max(dist_nearest_lasPt) <= sqrt(20.^2 + (0.25/2)^2))
}

